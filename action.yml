name: 'PR Labeler'
description: 'Automatically labels your PRs based on their content'
author: 'Eugene Kravtsov'
inputs:
  configuration-path:
    description: 'The path for the label configurations'
    default: '.github/pr-labeler.json'
branding:
  icon: 'tag'
  color: 'white'
runs:
  using: "composite"
  steps:
    - name: Perform the PR labeling
      run: |
        # Get the configuration file
        URL_CONF="https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.pull_request.base.ref }}/${{ inputs.configuration-path }}"
        echo "Reading the configuration file from" $URL_CONF
        CONF=$(curl -s -X GET -G $URL_CONF \
          --header 'Authorization: token ${{ env.GITHUB_TOKEN }}' \
          --header 'content-type: application/json')
        LABELS=$( echo $CONF | jq '.[0] | .[] .label') # .[0] here and further means that projects' labels are always in the 1st group in JSON
        LABELS=${LABELS// /%20}
        SIZES=$( echo $CONF | jq '.[1] | .[] .label') # .[1] - the sizes' labels
        SIZES=${SIZES// /%20}
        echo "Labels:" $LABELS
        echo "Sizes:" $SIZES
        
        # Get the link to the repo's labels
        URL_LABELS="https://api.github.com/repos/${{ github.repository }}/labels"
        
        # Get the list of the changed files from the Pull Request
        URL_FILES="https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files"
        FILES=$(curl -s -X GET -G $URL_FILES \
          --header 'Authorization: token ${{ env.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' | jq '.[] .filename')
        echo "Files:" $FILES
        
        # Calculate the amount of changed lines
        CHANGES=$(curl -s -X GET -G $URL_FILES \
          --header 'Authorization: token ${{ env.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' | jq '[.[] .changes] | reduce .[] as $sum (0; .+$sum)')
        echo "Changes:" $CHANGES
        
        # Iterate through the configuration file
        echo "Setting the labels..."
        INDEX=0
        for LBL in $LABELS
        do
          # Check whether the label's paths are present among the files
          if [ $(echo $CONF | jq --arg INDEX $INDEX --arg FILES "$FILES" '.[0] | .[$INDEX|tonumber] .path | any(.[]; inside($FILES))') = "true" ]
          then
            LABEL=${LBL//%20/ }
            # NOTE: In the condition below $LBL is still used. That is the only place and is intentional.
            # Check whether the corresponding label exists in the project, if not - create it
            if [ $(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ env.GITHUB_TOKEN }}" -X GET -G "$URL_LABELS/${LBL:1:-1}") -ne 200 ]
            then
              COLOR=$(echo $CONF | jq --arg INDEX $INDEX '.[0] | .[$INDEX|tonumber] .color')
              curl -s -o /dev/null -H "Authorization: token ${{ env.GITHUB_TOKEN }}" -X POST $URL_LABELS -d "{\"name\": $LABEL, \"color\": $COLOR}"
              echo Label $LABEL is created.
            fi    
            # Add the label to the Pull Request
            # TODO: collect all LBLs and post them as one array
            curl -s -o /dev/null -H "Authorization: token ${{ env.GITHUB_TOKEN }}" -X POST \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" -d "[ $LABEL ]"
            echo Label $LABEL is assigned.
          fi
          INDEX=$((INDEX+1))
        done
        
        echo "Setting the size label..."
        INDEX=0
        for LBL in $SIZES
        do
          # Check whether the size of changes is equal or less than current label
          if [ $CHANGES -le $(echo $CONF | jq --arg INDEX $INDEX '.[1] | .[$INDEX|tonumber] .size') ]
          then
            LABEL=${LBL//%20/ }
            # NOTE: In the condition below $LBL is still used. That is the only place and is intentional.
            # Check whether the corresponding label exists in the project, if not - create it
            if [ $(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ env.GITHUB_TOKEN }}" -X GET -G "$URL_LABELS/${LBL:1:-1}") -ne 200 ]
            then
              COLOR=$(echo $CONF | jq --arg INDEX $INDEX '.[1] | .[$INDEX|tonumber] .color')
              curl -s -o /dev/null -H "Authorization: token ${{ env.GITHUB_TOKEN }}" -X POST $URL_LABELS -d "{\"name\": $LABEL, \"color\": $COLOR}"
              echo Label $LABEL is created.
            fi
            # Add the label to the Pull Request
            curl -s -o /dev/null -H "Authorization: token ${{ env.GITHUB_TOKEN }}" -X POST \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" -d "[ $LABEL ]"
            echo Label $LABEL is assigned.
            # Do not add more size labels, one is enough
            break
          fi
          INDEX=$((INDEX+1))
        done
        echo "Done."
        
      shell: bash